using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FichConf
{
	class FicheroConf
	{
		// IMPORTANTE: TODAS LAS UBICACIONES DE LOS ARCHIVOS EN LA APERTURA DE FLUJOS Y COMPROBACIONES ESTÁN SUJETAS A MODIFICACIÓN

		#region Privado: utilidades del fichero de configuración

		// Método privado para la apertura de los flujos en los ficheros
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		private static void AperturaFicheros(out StreamReader lector, out StreamWriter escritor)
		{
			if (File.Exists("../../temp.txt"))	// Comprobación si el fichero temporal existe ya
			{
				File.Delete("../../temp.txt");	// En caso de que exista eliminarlo
			}

			lector = File.OpenText("../../Datos.co");	// Crear un flujo de lectura sobre el fichero de configuración
			escritor = new StreamWriter(File.OpenWrite("../../temp.txt"));	// Crear el fichero temporal y crear un flujo de escritura sobre él
		}

		// Método para guardar los cambios realizados en el fichero
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		private static void GuardarDatos()
		{
			File.Delete("../../Datos.co");	// Eliminar el fichero de configuración sin los datos actualizados
			File.Copy("../../temp.txt", "../../Datos.co");	// Copiar el contenido del fichero temporal (que son los datos actualizados) en un fichero de configuración nuevo que se crea en el mismo momento de copia
			File.Delete("../../temp.txt");	// Eliminar el fichero temporal
		}

		// Método para comprobar que el fichero existe
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		private static void CompExist()
		{

			if (!File.Exists("../../Datos.co"))		// Comprobar que el fichero de configuración existe
			{
				throw new IOException("El fichero de configuración al que intenta acceder no existe.");		// En caso de que no exista lanzar una excepción con el mensaje de error.
			}

			// IMPORTANTE: si el fichero de configuración ya existe, se asume que el formato es correcto ("[variable]:[valor]")
			// En caso contrario, el programa fallará. El formato viene especificado en la documentación.
		}

		#endregion

		// Método para recuperar la jornada laboral semanal del fichero de configuración
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		public static int getJornada()
		{
			int jornada = 0;
			string aux = "";
			string[] info; // Array en el que se almacena el split de la cadena del documento
			StreamReader lector;

			CompExist();	// Comprobación de la existencia del fichero de configuración

			lector = File.OpenText("../../Datos.co");   // Apertura del flujo de lectura del fichero -- SUJETO A MODIFICACIÓN
			while (lector.Peek() != -1 && jornada == 0) // Comprobación de final de documento y si ha encontrado la jornada
			{
				aux = lector.ReadLine();                // Almacenar la lectura de la línea
				info = aux.Split(":".ToCharArray());    // Especificar por que parte de la cadena se realiza la separación
				if (info[0].Equals("JORNADA"))          // Comprobar que es la jornada
				{
					Int32.TryParse(info[1], out jornada);
				}
			}
			lector.Close();     // Cerrar el flujo de lectura del fichero

			return jornada;
		}

		// Método para recuperar el incremento de las horas extras del fichero de configuración
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		public static float getHoraExtra()
		{
			float extra = 0.00F;
			string aux = "";
			string[] info; // Array en el que se almacena el split de la cadena del documento
			StreamReader lector;

			CompExist();	// Comprobación de la existencia del fichero de configuración

			lector = File.OpenText("../../Datos.co");		// Apertura del flujo de lectura del fichero -- SUJETO A MODIFICACIÓN
			while (lector.Peek() != -1 && extra == 0.00F)	// Comprobación de final de documento y si ha encontrado la jornada
			{
				aux = lector.ReadLine();					// Almacenar la lectura de la línea
				info = aux.Split(":".ToCharArray());		// Especificar por que parte de la cadena se realiza la separación
				if (info[0].Equals("HORASEXTRAS"))			// Comprobar que son las horas extras
				{
					info[1] = info[1].Replace(".",",");
					Single.TryParse(info[1], out extra);
				}
			}
			lector.Close();     // Cerrar el flujo de lectura del fichero

			return extra;
		}

		// Método para recuperar las retenciones del fichero de configuración
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		public static int getRetenciones()
		{
			int retenciones = 0;
			string aux = "";
			string[] info; // Array en el que se almacena el split de la cadena del documento
			StreamReader lector;

			CompExist();    // Comprobación de la existencia del fichero de configuración

			lector = File.OpenText("../../Datos.co");   // Apertura del flujo de lectura del fichero -- SUJETO A MODIFICACIÓN
			while (lector.Peek() != -1 && retenciones == 0) // Comprobación de final de documento y si ha encontrado la jornada
			{
				aux = lector.ReadLine();                // Almacenar la lectura de la línea
				info = aux.Split(":".ToCharArray());    // Especificar por que parte de la cadena se realiza la separación
				if (info[0].Equals("RETENCIONES"))      // Comprobar que son las retenciones
				{
					Int32.TryParse(info[1], out retenciones);
				}
			}
			lector.Close();     // Cerrar el flujo de lectura del fichero

			return retenciones;
		}

		// Método para recuperar la contraseña del fichero de configuración
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		public static string getPass()
		{
			string pass = "";
			string aux = "";
			string[] info; // Array en el que se almacena el split de la cadena del documento
			StreamReader lector;

			CompExist();    // Comprobación de la existencia del fichero de configuración

			lector = File.OpenText("../../Datos.co");   // Apertura del flujo de lectura del fichero -- SUJETO A MODIFICACIÓN
			while (lector.Peek() != -1 && pass.Equals("")) // Comprobación de final de documento y si ha encontrado la jornada
			{
				aux = lector.ReadLine();                // Almacenar la lectura de la línea
				info = aux.Split(":".ToCharArray());    // Especificar por que parte de la cadena se realiza la separación
				if (info[0].Equals("PASS"))          // Comprobar que es la jornada
				{
					pass = info[1];
				}
			}
			lector.Close();     // Cerrar el flujo de lectura del fichero

			return pass;
		}

		// Método para reescribir la jornada laboral semanal del fichero de configuración
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		public static void escribirJornada(string nuevajornada)
		{
			string[] info;
			StreamReader lector;	// Variable de lectura del fichero de configuración
			StreamWriter escritor;  // Variable de escritura en fichero temporal

			CompExist();  // Comprobación de la existencia del fichero de configuración

			AperturaFicheros(out lector, out escritor);		// Apertura de ambos ficheros con sus respectivos flujos
			while (lector.Peek() != -1)
			{
				info = lector.ReadLine().Split(":".ToCharArray());	
				if (info[0].Equals("JORNADA"))				// Comprobar si se llega al dato que queremos modificar
				{
					info[1] = nuevajornada;					// Modificación en los datos
				}
				escritor.WriteLine(info[0] + ":" + info[1]);	// Escritura en el fichero temporal
			}
			escritor.Close();
			lector.Close();		// Cerrar los flujos

			GuardarDatos();		// Copiar los datos del fichero temporal al fichero de configuración y eliminar el temporal
		}

		// Método para reescribir el incremento de las horas extras del fichero de configuración
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		public static void escribirHoraExtra(string nuevahora)
		{
			string[] info;
			StreamReader lector;    // Variable de lectura del fichero de configuración
			StreamWriter escritor;  // Variable de escritura en fichero temporal

			CompExist();    // Comprobación de la existencia del fichero de configuración

			AperturaFicheros(out lector, out escritor);     // Apertura de ambos ficheros con sus respectivos flujos
			while (lector.Peek() != -1)
			{
				info = lector.ReadLine().Split(":".ToCharArray());
				if (info[0].Equals("HORASEXTRAS"))          // Comprobar si se llega al dato que queremos modificar
				{
					info[1] = nuevahora;                    // Modificación en los datos
				}
				escritor.WriteLine(info[0] + ":" + info[1]); // Escritura en el fichero temporal
			}
			escritor.Close();
			lector.Close();     // Cerrar los flujos

			GuardarDatos();     // Copiar los datos del fichero temporal al fichero de configuración y eliminar el temporal
		}

		// Método para reescribir las retenciones de las horas extras del fichero de configuración
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		public static void escribirRetenciones(string nuevaretencion)
		{
			string[] info;
			StreamReader lector;    // Variable de lectura del fichero de configuración
			StreamWriter escritor;  // Variable de escritura en fichero temporal

			CompExist();    // Comprobación de la existencia del fichero de configuración

			AperturaFicheros(out lector, out escritor);     // Apertura de ambos ficheros con sus respectivos flujos
			while (lector.Peek() != -1)
			{
				info = lector.ReadLine().Split(":".ToCharArray());
				if (info[0].Equals("RETENCIONES"))          // Comprobar si se llega al dato que queremos modificar
				{
					info[1] = nuevaretencion;               // Modificación en los datos
				}
				escritor.WriteLine(info[0] + ":" + info[1]); // Escritura en el fichero temporal
			}
			escritor.Close();
			lector.Close();     // Cerrar los flujos

			GuardarDatos();     // Copiar los datos del fichero temporal al fichero de configuración y eliminar el temporal
		}

		// Método para reescribir la contraseña de las horas extras del fichero de configuración
		// Desarrollador: Samuel Stratos Bater Herrero
		// Fecha de última comprobación: 23/11/2015
		public static void escribirPass(string nuevapass)
		{
			string[] info;
			StreamReader lector;    // Variable de lectura del fichero de configuración
			StreamWriter escritor;	// Variable de escritura en fichero temporal

			CompExist();    // Comprobación de la existencia del fichero de configuración

			AperturaFicheros(out lector, out escritor);     // Apertura de ambos ficheros con sus respectivos flujos
			while (lector.Peek() != -1)
			{
				info = lector.ReadLine().Split(":".ToCharArray());
				if (info[0].Equals("PASS"))                 // Comprobar si se llega al dato que queremos modificar
				{
					info[1] = nuevapass;                    // Modificación en los datos
				}
				escritor.WriteLine(info[0] + ":" + info[1]); // Escritura en el fichero temporal
			}
			escritor.Close();
			lector.Close();     // Cerrar los flujos

			GuardarDatos();     // Copiar los datos del fichero temporal al fichero de configuración y eliminar el temporal
		}
	}
}

