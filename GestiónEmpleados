using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication10
{
    /** Clase de controlador de Empleado creado por --- > Niels Bosch
    *Esta clase contiene todos los metodos necesarios para lo siguiente: Crear empleado, Modificarlo, Eliminarlo, listarlo y salir.
    *Es llamado principalmente por la Interfaz y hace uso de metodos y constructores de la clase de Empleado creado por Niels Bosch
    */
    /** 
    *Ultima Edicion: 27/10/2015 ---- > He creado la clase y creado los metodos para que Ruben sepa lo que tiene que llamar. 
    *                                  Ademas he comentado lo que tiene que hacer cada metodo para que a la hora de empezar (yo, Niels)
    *                                  a programar no hay duda de lo que hace cada metodo.
    */
                                  
    
 

    //APUNTES PARA SAMU: Aver, he escrito "1234" en cada comentario donde tengo duda. Haz un ctrl+f para buscar "1234" y cada sitio donde es, tengo dudas que me gustaria que me echaras una mano (tu o pedro o quien sea)

    class ControladorEmpleado
    {

        
        // COMPROBACIÓN DE EXISTENCIA DEL EMPLEADO
        //Creado: Niels Bosch
        //Es un metodo privado ya que solo lo vamos a usar dentro de esta clase
         private static bool ExisteEmpleado(Empleado[] DNI , string dni) //devuelve un true o false dependiendo si existe o no.
        { //1234 - Empleado[] DNI esta bien? El array Empleado donde deberia de estar creado? en la clase Empleado o en esta clase?
            bool existe = false;
            int indice = 0;

            if (DNI != null)
            {
                // Recorre la lista de nominas hasta que:
                //      Peor caso: Realiza un recorrido completo (No lo encuentra)
                //      Mejor caso: Encuentra equivalencia
                for (indice = 0; (indice < DNI.Length) && !existe; indice++)
                {
                    if (DNI[indice].Dni.Equals(dni)) existe = true;
                }
            }

            return existe;
         }


        //Este Metodo permite la CREACIÓN de un empleado nuevo.
        //Creado: Niels Bosch
        // Metodo Publico
        public static void NuevoEmpleado( ref Empleado[] empleados) // <--------- TENGO DUDAS SI ESTA ES LA MANERA CORRECTA DE HACERLO
        {

            //Permite crear un empleado con su DNI, Nombre y Apellido.
             Empleado empleadoTemp;          // Datos del nuevo cliente a añadir
            Empleado[] copia = null;    // Lista temporal de clientes
            bool salir = false;
            string mensaje = null;

            // Entrada de Datos
            do
            {
                // ENTRADA
                //1234 - Interfaz.DatosEmpleados() no entiendo bien que le tengo que pedir a ruben que me haga el return de ese metodo
                // porque me tiene que devolver todos lo datos de los empleados (nombre, apellido y dni)
                //practicamente: No se si ese metodo esta bien.
                clienteTemp = Interfaz.DatosEmpleados();  // Solicitud de Datos de Empleado

                // PROCESAMIENTO
                // Validación: Comprobar si el Cliente se encuentra ya registrado
                if (!ExisteEmpleado(empleados, empleadoTemp.Dni))
                {
                    // Registro Cliente: Gestión Dinámica de Memoria
                    if (empleados == null)
                    {
                        empleados = new Empleado[1];
                    }
                    else
                    {
                        copia = new Empleado[empleados.Length];
                        empleados.CopyTo(copia, 0);
                        empleados = new Empleado[empleados.Length + 1];
                        copia.CopyTo(empleados, 0);
                        copia = null;   // Liberación de Memoria
                    }
                    // Almacenamiento del Cliente
                    empleados[empleados.Length - 1] = empleadoTemp;

                    mensaje = "\n\t Empeado registrado correctamente";
                }
                else
                {
                    mensaje = "\n\t El Empleado ya se encuentra registrado";
                }

                // SALIDA
                mensaje = mensaje + "\n\n\t Desea registrar otro Empleado (s/n): ";

                // Sí desea continuar --> salir = false
                // No desea continuar --> salir = true
                salir = Interfaz.Continuar(mensaje) ? false : true;

            } while (!salir);


        }

        //Este metodo permite LISTAR los empleados
        //Creado: Niels Bosch
        //Metodo Publico
          public static void ListarEmpleado(Empleado[] empleados)
        {
              //Lista todos los empelados que tenemos almacenados
                if (empleados != null)
            {
                Interfaz.ListarEmpleados(empleados);
                Interfaz.Continuar("\n\tPulse ENTER para continuar");
            }
            else
            {
                Interfaz.Continuar("\n\tNo hay clientes a mostrar. \n\tPulse ENTER para continuar");
            }
        }
        
        //Este metodo permite ELIMINAR un empleado
        //Creado: Niels Bosch
        //Metodo Publico
          public static void EliminarEmpleado( //Minimo el DNI)
        //1234 - Duda que tengo es que parametros me va a tener que recibir este metodo, el DNI solo, no?
              //APUNTES: Crear array temporal. Si el DNI no coincide, meter los datos en el array temporal. Si coincide, no meterlo. 
//luego sobreescribir el array temporal por el original asi eliminando el empleado que se queria eliminar
          
          {

              //Primero comprobara si existe el empleado
              //Mostrara la información del empleado y volvera a pedir si este es el que se quiere eliminar
              //si el usuario vuelve a confirmar, se elimina.
              //Mostrar mensaje de exito de eliminación


        }

          //Este metodo permite MODIFICAR un empleado especifico.
          //Creado: Niels Bosch
          //Metodo Publico
          public static void ModificarEmpelado(ref Empleado[] empleados)
        {


              //Hacer comprobacion si esta vacio, en el caso de serlo que sale un mensaje.

              //Si no lo esta mostrar la información del empleado
              //una vez mostrado, ***********************************PREGUNTAR COMO SE QUIERE HACER LA MODIFICACION*************

         string dni = null;      // Empleado para la búsqueda del cliente
            float cantidad = 0.0F;  // Cantidad a ingresar o reintegrar
            byte opcion;            // Opción del menú
            int indice = 0;         // Posición del cliente en la lista de clientes
            string mensaje = null;

            // ENTRADA: Solicitud del DNI del cliente para operar
            dni = Interfaz.SolicitarDni();

            // PROCESO
            // Comprobación de la existencia del Cliente
            if (!ExisteEmpleado(empleados, dni)) //1234 - No se si los parametros especificados aqui (empleados, dni) estan correctos o si deberia de pedir otros datos o lo que sea
            {
               //Insertar codigo para pedir la opcion de la interfaz.
                //1234 - Aqui esta hecho para que imprima el menu. Deberia de estar hecho por ruben todo lo de la interfaz
                //pero creo que es mas sencillo que en este caso, lo haga yo no? ya que ademas las cosas que va a pedir
                // es algo que solo se aplica si queremos eliminar un cliente. Jesus tambien lo hizo asi en su programa.
                switch (opcion)
                {
                    // Salida del Menú de Operación
                    case 0:
                        mensaje = "\n\tOperación Cancelada\n";
                        break;
                    
                    case 1:
                       

                    case 2:
                      

                    case 3:
                }
            }
            else {
                mensaje = "\n\tERROR: No se encuentra el Cliente\n";
            }

            // SALIDA
            mensaje = mensaje + "\n\tPulse ENTER para continuar"; 
            Interfaz.Continuar(mensaje);
        }

    }
}
