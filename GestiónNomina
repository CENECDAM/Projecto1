using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//creado por Pedro Canovas el dia 19/11/2015
namespace BancoNomina
{	//Última comprobación: 28/11/2015
    static class GestiónNomina
    {
        // Desarrollador: Pedro Cánovas Medina
        // Fecha de creación: 23/11/2015
        // Método Privado: Comprueba existencia de nominas
        private static bool ExisteNomina(Nomina[] listaDni, string dni)
        {
            bool existe = false;
            int indice = 0;

            if (listaDni != null)
            {
                // Recorre la lista de nominas hasta que:
                //      Peor caso: Realiza un recorrido completo (No lo encuentra)
                //      Mejor caso: Encuentra equivalencia
                for (indice = 0; (indice < listaDni.Length) && !existe; indice++)
                {
                    if (listaDni[indice].Dni.Equals(dni)) existe = true;
                }
            }

            return existe;
        }

        // Método Privado: Comprueba existencia de nominas ya registradas
        // Si existe, indica la posición (índice) en el que se encuentra
        private static bool ExisteNomina(Nomina[] listaDni, string dni, ref int posicion)
        {
            bool existe = false;    // Control de existencia
            int indice = 0;

            if (listaDni != null)
            {
                // Recorre la lista de nominas hasta que:
                //      Peor caso: Realiza un recorrido completo (No lo encuentra)
                //      Mejor caso: Encuentra equivalencia
                for (indice = 0; (indice < listaDni.Length) && !existe; indice++)
                {
                    if (listaDni[indice].Dni.Equals(dni))
                    {
                        existe = true;
                        posicion = indice;
                    }
                }
            }

            return existe;
        }

        private static bool ExisteEmpleado(Empleado[] listaDni, string dni, ref int posicion)
        {
            bool existe = false;    // Control de existencia
            int indice = 0;

            if (listaDni != null)
            {
                // Recorre la lista de nominas hasta que:
                //      Peor caso: Realiza un recorrido completo (No lo encuentra)
                //      Mejor caso: Encuentra equivalencia
                for (indice = 0; (indice < listaDni.Length) && !existe; indice++)
                {
                    if (listaDni[indice].Dni.Equals(dni))
                    {
                        existe = true;
                        posicion = indice;
                        //hacer console con lo que pasa
                    }
                }
            }

            return existe;
        }
        // Método público: Añadir nueva nomina - esto lo haremos desde el main: ControladorNomina.NuevaNomina()
        public static void NuevaNomina()
        {
            Nomina nominaTemp;          // Datos de la nomina a añadir
            Nomina[][] copia = null;    // Lista temporal de nominas

            bool salir = false;
            string mensaje = null;

            // Entrada de Datos
            do
            {
                // ENTRADA de datos para la nomina, como vamos a crearla nueva, pedimos los datos de la primera semana
                nominaTemp = Interfaz.DatosNominaSemana();  // Solicitud de Datos para crear la nomina
                //se debera de crear el flujo para solicitar las semanas una a una
                //una vez rellenado el array nominaTemp, se lo mandamos a Samu para que cree el file
                // PROCESAMIENTO
                // Validación: Comprobar si la nomina existe
                if (!ExisteNomina(DatosNomina, nominaTemp.Dni))
                {
                    // Registro Cliente: Gestión Dinámica de Memoria

                    // Almacenamiento de la nomina

                    //llamo al metodo de escritura del fichero
                    EscribirFichero(nominaTemp);
                    mensaje = "\n\t Nomina registrada correctamente";
                }
                else
                {
                    mensaje = "\n\t El Empleado ya tiene una nomina";
                }

                // SALIDA
                mensaje = mensaje + "\n\n\t Desea seguir operando con nominas? (s/n): ";

                // Sí desea continuar --> salir = false
                // No desea continuar --> salir = true
                salir = Interfaz.Continuar(mensaje) ? false : true;

            } while (!salir);

        }



        // Método público: Mostrar lista de nominas
        public static void ListarNominas(Nomina[] nominas)
        {

            if (nominas != null)
            {
                Interfaz.MostrarListaNominas(nominas);
                Interfaz.Continuar("\n\tPulse ENTER para continuar");
            }
            else
            {
                Interfaz.Continuar("\n\tNo hay nominas que mostrar. \n\tPulse ENTER para continuar");
            }
        }


        // Método público: Eliminar nomina
        public static void EliminarNominaSemana(ref Nomina[] semanas)
        {
            int semana = null;      // que semana se desea eliminar en la nomina
           
            int indice = 0;         // Posición de la semana en la lista de semanas
            string mensaje = null;
            bool salir = false;

            do
            {
                // ENTRADA: Solicitud de la semana que deseamos eliminar
                semana = Interfaz.SolicitarSemana(semanas,semana);
                indice = semana;
                if (ExisteSemana(semanas, ref indice))
                {
                    
                        //eliminacion de la semana seleccionada
                        //creo un array de tipo RNominas para almacenar el array de nominas original
                        //tiene la longitud del original menos uno porque como vamos a borrar un elemento lo 
                        //hacemos con una dimension menos
                        Nomina[] semanasC = new Nomina[semanas.Length - 1];

                        //recorro desde 0 hasta la longiud del array de copia 
                        //la i es la que controla al array de copia y la j la que controla el array original
                        
                        for (int i = 0, j = 0; i < semanasC.Length; i++, j++)
                        {

                            //si la posicion que queremos borrar (indice) es igual a i, entonces es que ese 
                            //elemento no lo queremos
                            //asi que hacemos que el indice del segundo array de un salto y no pase por 
                            //ese elemento en concreto
                            if (i == indice)
                            {
                                j++;
                            }

                            
                           
                            //voy asignando los elementos que han quedado del array original al array de copia 

                            semanasC[i] = semanas[j];
                        }
                        //como es una dimension menos se sobreescribe al pasarlo
                        semanas = semanasC;

                      
                        
                        Interfaz.MostraNomina(semanas);
                        mensaje = "\n\tSEMANA ELIMINADA CON EXITO\n";

                    



                }
                else
                {
                    mensaje = "\n\tERROR: No se encuentra la semana\n";
                }

                // SALIDA
                mensaje = mensaje + "\n\n\t Desea eliminar otra semana (s/n): ";

                // Sí desea continuar --> salir = false
                // No desea continuar --> salir = true
                salir = Interfaz.Continuar(mensaje) ? false : true;
                // mensaje = mensaje + "\n\tPulse ENTER para continuar";
                //Interfaz.Continuar(mensaje);


            } while (!salir);
	


        }


        // Método público: Gestionar las noominas
        // Modificado: Samuel
        public static void GestionNominas() // ref Nomina[] nominas originalmente, creo que no hacen falta
	{
		string dni = null;      // dni para la búsqueda del usuario
		byte opcion;            // Opción del menú
		int indice = 0;         // Posición del cliente en la lista de nominas
		string mensaje = null;
		int semana = 0;
		Nomina[] semanasTemp = new Nominas[5];

		// ENTRADA: Solicitud del DNI del empleado para gestionar sus nominas

		try
		{
			dni = InterfazNomina.SolicitarDni();
		}
		catch (Exception e)
		{
				mensaje = (e.Message.ToString());
		}

		// PROCESO
		// Comprobación de la existencia del empleado
		if (ExisteCliente(nominas, dni, ref indice))
		{
			//recogemos la opcion deseada del menu de gestion de nominas
			opcion = InterfazNomina.MenuGestionNominas();
			switch (opcion)
			{
				// Salida del Menú de Operación
				case 0:
					mensaje = "\n\tSaliendo...\n";
					break;
				// Crear Nomina
				case 1:
					semanasTemp = InterfazNomina.PedirDatosSemanas();  // Solicitud de Datos
					FnomSemanal fs = new FnomSemanal(dni);
					fs.EscribirFichero(semanasTemp);
					//samu creo que hace falta aqui que me pidas el dni para saber de quien son las semanas que me tienes que pintar
					fs.LeerSemanas();
					//  FichNomSemanal.LeerSemanas(semanasTemp);
					break;
				// Editar Nomina
				case 2:
					bool salir2 = false;
					bool respuesta = true;
                    bool opcionEditar = true;
                    bool editar = false;
                    float paga_horas=0.0F;
                    int horas=0;
                    int horas_extra = 0;
					FnomSemanal fs = new FnomSemanal(dni);
					
                    if ((fs.LeerSemanas(ref semanasTemp))&&(semanasTemp != null))
	                {
		 
                    
                    
                              do
	                            {
                                Interfaz.ListarSemanas(semanasTemp);
                                selSemana = Interfaz.SolicitarSemana();
                                opcionEditar=Interfaz.EditarDatosSemanas(semanasTemp,selSemana);  // Solicitud de Datos
                        
                                 switch (opcion)
                                {
                                         //EDitar horas
                            case 1:
                            bool horasOk = false;
                            
                            horasOk=LeerHoras(ref horas, mensaje);
                            if (horasOk)
                            {
                                semanasTemp[selSemana - 1].Horas = horas;
                            }
                            else {
                                InterfazNomina.MostrarError(mensaje);
                            }






                            break;
                            //EDitar euro hora
                        case 2:
                             bool eurosHoraOk = false;

                             eurosHoraOk = LeerPagaHoras(ref paga_horas, mensaje);
                             if (eurosHoraOk)
                            {
                                semanasTemp[selSemana - 1].PagaHoras = paga_horas;
                            }
                            else {
                                InterfazNomina.MostrarError(mensaje);
                            }


                            break;
                        case 3:
                             bool extraOk = false;

                             extraOk = LeerPagaHoras(ref horas_extra, mensaje);
                             if (eurosHoraOk)
                            {
                                semanasTemp[selSemana - 1].HorasExtra = horas_extra;
                            }
                            else {
                                InterfazNomina.MostrarError(mensaje);
                            }

                            break;


                            break;
                        case 0:
                            Console.WriteLine("\t Eliminar Semana\n");

                            break;

                    }
                         editar = Continuar("\n\n\t ¿Desea editar otra semana? (s/n): ");
                            
	         
	                    } while (editar);  
                       
                        
					

					fs.EscribirFichero(semanasTemp);
                        

	                }
					
					break;
				case 3:
					bool close = false;
					semanasTemp = FichNomSemanal.LeerSemanas(dni);
                    CerrarMes(dni);
					
					Interfaz.ImprimirCerrar();
					
					break;
			}
		}
		else
		{
			mensaje = "\n\tERROR: No se encuentra el empleado\n";
		}

		// SALIDA
		mensaje = mensaje + "\n\tPulse ENTER para continuar";
		Interfaz.Continuar(mensaje);
	}

        public static void CerrarMes(string dni)
        {
            Empleados[] empleadosTemp = null;
            bool encontrado = false;
            bool existeAchivo = false;
            Nomina[] semanasTemp = null;
            Nomina[] semanasCopia = null;
            Nomina nominaTotal;
            int pos = 0;
            bool cerrar = false;



            if ((!FichEmpleados.LeerEmpleados(ref empleadosTemp)) && (empleadosTemp == null))
            {

                Intefaz.MensajeFichEmp();
            }
            else {

               FnomSemanal fs = new FnomSemanal(dni);
               encontrado= ExisteEmpleado(empleadosTemp, dni, ref pos);


                if(encontrado){
                    existeArchivo = fs.ExisteArchivo();
                    fs.LeerSemanas(ref semanasTemp);
                    
                    if((existeArchivo)&&(semanasTemp == null)){

                        nominaTotal = FichNomMensual.Total(semanasTemp);

                        semanasCopia = new Nomina[semnasTemp.Length];
                        semanasTemp.CopyTo(semanasCopia, 0);
                        semanasTemp = new Nomina[semanasTemp.Length + 1];
                        semanasCopia.CopyTo(semanasTemp, 0);
                        semanasCopia = null;   // Liberación de Memoria

                        semnasTemp[semanasTemp.Length -1] = semanasTotal;
                        


                        cerrar= Interfaz.CerrarNomina(semanasTemp,empleadosTemp[pos]);  // Cerrar nomina para confirmar imprension y eliminar7

                        

            if (cerrar == true)
            {
                //GestionNomina.CerrarMes(emp);	// Habría que crear un método que se encargase de recibir el empleado 
                //de aqui, ya que con el dni de ese empleado ya se tendría el objeto
                // FNomSemanal, y con esos dos objetos llamar al metodo de crear mes de FnomMensual.
                
                FichNomMensual.CrearMes(empleado,fs);

                Console.WriteLine("\n\tEl mes ha sido cerrado, y el fichero esta listo para imprimir");
            }
            else
            {
                Console.WriteLine("\n\tEl mes no ha sido cerrado");
            }
                        

                    }
  
                }


                

               

            }
            
          

        }
    }
   
}


