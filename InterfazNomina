using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;

namespace Interfaces
{
	class InterfazNomina
	{

		//metodo que recoge el dato introducido y comprueba si es un entero
		//return error = false si todo esta correcto, return error = true si el formato no es el correcto
		private static bool LeerHoras(ref int horas, ref string mensaje)
		{

			string aux = null;
			bool error = false;

			Console.Write("\t\t Introduzca el numero de horas trabajadas en la semana: ");
			aux = Console.ReadLine();
			aux = aux.Trim();
			//controlo que en la cadena aux pueda haber algun punto
			int point = aux.IndexOf(".");
			int coma = aux.IndexOf(",");

			if ((point != -1) && (coma != -1))
			{
				// -1 es lo que IndexOf devuelve si NO encuentra  el punto, entonces si es distinto 
				//a -1 quiere decir que existe un punto
				// -1 es lo que IndexOf devuelve si NO encuentra  la coma, entonces si es distinto 
				//a -1 quiere decir que existe una coma
				error = true;
				mensaje = "Numero de horas incorrectas: Las horas han de ser un numero entero positivo";
			}

			// comprobación del formato entero ademas de que el numero tiene quee ser positivo

			if (!(Int32.TryParse(aux, out horas) && (horas > 0)))
			{

				error = true;
				mensaje = "Numero de horas incorrectas: Las horas han de ser un numero entero positivo";
			}

			return error;

		}

		// Modificado: Samuel -> la paga_horas es un float
		private static bool LeerPagaHoras(ref float paga_horas, ref string mensaje)
		{

			string aux = null;
			bool error = false;

			Console.Write("\t\t Introduzca Cantidad: ");
			aux = Console.ReadLine();
			aux = aux.Trim();
			aux = aux.Replace(".", ",");

			if (!(Single.TryParse(aux, out paga_horas) && (paga_horas > 0)))
			{

				error = true;
				mensaje = "Importe precio/hora incorrecto: El importe precio/hora ha de positivo y sin letras o carácteres extraños";
			}
			// aux = valor.ToString();
			return error;

		}
		private static bool LeerDni(ref string dni, ref string mensaje)
		{
			bool error = false;
			string aux = null;


			Console.Write("\t\t Introduzca Dniiii (12345678A): ");

			aux = Console.ReadLine();
			int numero;
			aux = aux.Trim();   // Limpieza de entrada (espacios en blanco)


			if ((aux.Length != 9))
			{
				error = true;
				mensaje = "Dni Incorrecto IIII: Introduzca 8 números y una letra";
			}
			else if (!Int32.TryParse(aux.Substring(0, 8), out numero) || (Int32.TryParse(aux[8].ToString(), out numero)))
			{
				error = true;
				mensaje = "Dni Incorrecto IIIII: Formato erróneo (22334455A)";
			}
			else
			{
				// Registro Dni válido con letra en mayúscula
				dni = aux.ToUpper();
			}


			return error;
		}
		private static void Cabecera()
		{
			Console.Clear();
			Console.ForegroundColor = ConsoleColor.Green;
			Console.WriteLine("");
			Console.WriteLine("                    G E S T I Ó N  DE  N Ó M I N A S");
			Console.WriteLine("\t----------------------------------------------------------");
			Console.WriteLine("");
		}
		private static void MostrarError(string message)
		{
			Console.WriteLine("ERROR: {0}\n", message);
		}
		private static bool LeerNumeroSemana(ref string semana, ref string mensaje)
		{
			float numeroSemanas = 0;

			bool error = false;

			semana = semana.Trim();
			//controlo que en la cadena aux pueda haber algun punto
			int point = semana.IndexOf(".");
			int coma = semana.IndexOf(",");

			if ((point != -1) && (coma != -1))
			{
				// -1 es lo que IndexOf devuelve si NO encuentra  el punto, entonces si es distinto 
				//a -1 quiere decir que existe un punto
				// -1 es lo que IndexOf devuelve si NO encuentra  la coma, entonces si es distinto 
				//a -1 quiere decir que existe una coma
				error = true;
				mensaje = "Numero de horas incorrectas: Las horas han de ser un numero entero positivo";
			}

			// comprobación del formato entero ademas de que el numero tiene quee ser positivo

			if (!(Single.TryParse(semana, out numeroSemanas) && (numeroSemanas > 0)))
			{

				error = true;
				mensaje = "Numero de horas incorrectas: Las horas han de ser un numero entero positivo";
			}

			return error;

		}
		public static byte MenuGestionNominas()
		{

			bool correcto = false;  // Control de datos correctos
			bool error = false;     // Control de errores
			string mensaje = null;  // Mensaje de error
			string aux = null;
			byte opcion = 0;

			do
			{
				Cabecera();
				if (error)
				{
					MostrarError(mensaje);  // Presentación de Errores
				}
				Console.Write("\t\t1. Crear Nómina\n");
				Console.Write("\t\t2. Editar Nómina\n");
				Console.Write("\t\t3. Listar Nómina\n\n");
				Console.Write("\t\t0. Salir\t\n\n");
				Console.WriteLine("\t----------------------------------------------------------");
				Console.ResetColor();
				Console.ForegroundColor = ConsoleColor.Gray;
				Console.WriteLine("\tPulse 0 para volver al Menú Principal...");
				Console.ResetColor();

				aux = Console.ReadLine();   // Leemos la opcion
				aux = aux.Trim();           // Limpiamos los espacios en blanco
				if (Byte.TryParse(aux, out opcion) && (opcion >= 0) && (opcion <= 3))
				{
					correcto = true;
				}
				else
				{
					// Configuración ERROR
					correcto = true;
					mensaje = "Opción Incorrecta (seleccione una opción del menú: 0 - 3)";
				}

			} while (!correcto);

			return opcion;
		}
		public static string SolicitarDni()
		{
			string dni = null;
			string mensaje = null;
			bool error = false;

			do
			{
				Cabecera();
				if (error)
				{
					MostrarError(mensaje);  // Presentación de Errores
					error = false;          // Reinicio del Control de Errores
				}

				error = LeerDni(ref dni, ref mensaje);

			} while (error);

			return dni;
		}
		
		// Modificado: Samuel
		public static Nomina DatosNominasSemana()
		{
			string mensaje = null;
			int horas = 0;
			float paga_horas = 0.0F;
			bool errorHoras = false;
			bool errorPagaHoras = false;
			FicheroConfig fc = null;
			int jornada = 0;
			float plus_salario = 0.0F;
			int retencion = 0;

			// Console.Clear --> No estoy seguro si lo tengo que hacer vaya a ser que borre algo importante, pero lo dejo aqui por si aca
			Cabecera();
			Console.WriteLine("\t DATOS PARA LAS NOMINAS SEMANALES: DATOS DE LAS SEMANAS\n");

			// ENTRADA: Datos de la nomina

			do
			{
				if (errorHoras)
				{
					MostrarError(mensaje);  // Presentación de Errores
					errorHoras = false;     // Reinicio del Control de Errores
				}

				errorHoras = LeerHoras(ref horas, ref mensaje);
			}
			while (errorHoras);

			do
			{
				if (errorPagaHoras)
				{
					MostrarError(mensaje);  // Presentación de Errores
					errorPagaHoras = false;     // Reinicio del Control de Errores
				}

			errorPagaHoras = LeerPagaHoras(ref paga_horas, ref mensaje);
			}
			while (errorPagaHoras);

			/*if ((!LeerEnteros(horas)) && (LeerEnteros(paga_horas)))
			{
				nomina(horas, paga_horas);
			} ---> No se yo si esto hace falta o su intención */

			fc = new FicheroConfig();
			jornada = fc.getJornada();
			plus_salario = fc.getPlusSalario();
			retencion = fc.getRetenciones();

			Nomina nomina = new Nomina(horas, paga_horas, retencion, jornada, plus_salario);  // Creacion de Nomina

			return nomina;     // Datos Nominas
		}

		// Creado: Samuel
		public static bool Continuar(string mensaje)
		{
			bool cont = false;
			string aux = null;

			Console.WriteLine(mensaje);
			aux = Console.ReadLine().Trim().ToLower();

			if (aux.Equals("s") || aux.Equals(""))
			{
				cont = true;
			}

			return cont;
		}

		public static int SolicitarSemana()
		{
			//llamo a dni
			//leo el fichero pasando el dni por el constructor con la clase de samu
			//una vez que hemos pasado el dni, la superp clase de samu ya nos trae la lista de semanas de ese empleado
			bool error = false;
			int numeroSemanas = 0;
			Nominas[] semanas;
			FichNomSemanal fs = FichNomSemanal(ref dni);
			semanas = fs.LeerSemanas(semanas);
			numeroSemanas = semanas.Length();
			//LeerNumeroSemana(numeroSemanas);
			do
			{
				Cabecera();
				if (error)
				{
					MostrarError(mensaje);  // Presentación de Errores
					error = false;          // Reinicio del Control de Errores
				}

				error = LeerNumeroSemana(numeroSemanas, ref mensaje);

			} while (error);

			return numeroSemanas;



		}

		// Modificado (más o menos): Samuel
		public static void MostrarNomina(Nomina semana)
		{
			//llamo a dni
			//leo el fichero pasando el dni por el constructor
			//una vez que hemos pasado el dni, la superp clase de samu ya nos trae la lista de semanas de ese cliente
			//me creo
			// Aqui supongo que es una única semana, igualmente voy a poner el código comentado por si acaso
			/*
			Console.Clear();
			Cabecera();
			Console.WriteLine("|{0, -8}|{1,-13}|{2,-14}|{3,-13}|{4,-13}|{5,-12}|{6,-12}", "Horas", "Euros/Hora", "Horas Extra", "Sal. Extra", "Sal. Bruto", "Impuestos", "Sal.Neto");
			Console.WriteLine("------------------------------------------------------------------------------------------------------");
			Console.WriteLine("|{0, -8}|{1,-13}|{2,-14}|{3,-13}|{4,-13}|{5,-12}|{6,-12}", semana.Horas, semana.PagaHoras, semana.HorasExtra, semana.SalarioExtra, semana.SalarioBruto, semana.Impuesto, semana.Neto);
			Console.WriteLine("------------------------------------------------------------------------------------------------------");
			*/
		}
		public static Nomina PedirDatosSemanas(Nomina semanas, ref float cantidad, byte opcion)
		{


			bool error = false;
			string mensaje = null;

			do
			{
				Cabecera();
				if (error)
				{
					MostrarError(mensaje);
					error = false;
				}

				switch (opcion)
				{
					case 1:
						Console.WriteLine("\t EDITAR SEMANA\n");
						break;
					case 2:
						Console.WriteLine("\t BORRAR SEMANA\n");
						break;
				}

				Cabecera();


				Console.WriteLine();

				error = LeerCantidad(ref cantidad, ref mensaje);

			} while (error);

		}

		// Modificado: Samuel
		public static void ListarSemanas(Nomina semanasTemp) // Creo que es una lista, pero no estoy seguro, igualmente lo pongo de las dos maneras
		{
			//int contador = 0;

			Console.Clear();
			Cabecera();

			//for (contador = 0; contador < semanasTemp.Length; contador++)
			//{

			Console.WriteLine(/*"\t     */"|{0, -8}|{1,-13}|{2,-14}|{3,-13}|{4,-13}|{5,-12}|{6,-12}", "Horas", "Euros/Hora", "Horas Extra", "Sal. Extra", "Sal. Bruto", "Impuestos", "Sal.Neto");
			Console.WriteLine("------------------------------------------------------------------------------------------------------");

			/*Se puede reutilizar este código (en caso de que no sea una lista) para que, si se quiere mostrar el total del mes, se pueda, ya que hay atributos a -1, que es la convención usada para saber si es el total del mes
			if(semanasTemp.Jornada == -1)
			{
				Console.WriteLine("TOTAL MES:   |{0, -8}|{1,-13}|{2,-14}|{3,-13}|{4,-13}|{5,-12}|{6,-12}", semanasTemp.Horas, semanasTemp.PagaHoras, semanasTemp.HorasExtra, semanasTemp.SalarioExtra, semanasTemp.SalarioBruto, semanasTemp.Impuesto, semanasTemp.Neto);
			}
			else
			{
			*/

			Console.WriteLine(/*"Semana " + (contador + 1) + "     */"|{0, -8}|{1,-13}|{2,-14}|{3,-13}|{4,-13}|{5,-12}|{6,-12}", semanasTemp/*[contador]*/.Horas, semanasTemp/*[contador]*/.PagaHoras, semanasTemp/*[contador]*/.HorasExtra, semanasTemp/*[contador]*/.SalarioExtra, semanasTemp/*[contador]*/.SalarioBruto, semanasTemp/*[contador]*/.Impuesto, semanasTemp/*[contador]*/.Neto);
			Console.WriteLine("------------------------------------------------------------------------------------------------------");
			//}

		}
		public static Nomina EditarDatosSemanas(Nomina semanasTemp)
		{
		}

		// Modificado: Samuel
		public static void CerrarNomina(Nomina semanasTemp /*, Empleado emp, Nomina total*/)	// Creo que es una lista, pero no estoy seguro, además
																								// hace falta pasar el empleado para mostrarlo y una nómina
																								// que sirve como total de todas las semanas (en FNomMensual está el método que devuelve tal nómina calculada)
		{
			bool cerrar = false;

			Console.Clear();
			Cabecera();
			Console.WriteLine("");
			/*escritor.WriteLine("------------------------------------------------------------------------------------------------------");
			escritor.WriteLine("Trabajador");
			escritor.WriteLine("DNI: {0}\t\tNombre: {1}   Apellidos: {2}", empleado.DNI, empleado.NOMBRE, empleado.APELLIDOS);
			escritor.WriteLine("------------------------------------------------------------------------------------------------------"); ----> Se puede poner en un método aparte*/
			ListarSemanas(semanasTemp); //mostramos la lista de semanas de la nomina para su posterior confirmación
			//ListarSemanas(total); //Este es en caso de que no sea una lista, o se puede sobrecargar
			Console.WriteLine("");

			cerrar = Continuar("\n\n\t ¿Desea continuar? (s/n): ");

			if (cerrar)
			{
				//GestionNomina.CrearMes(emp);	// Habría que crear un método que se encargase de recibir el empleado de aqui, ya que con el dni de ese empleado ya se tendría el objeto
											// FNomSemanal, y con esos dos objetos llamar al metodo de crear mes de FnomMensual.
				Console.WriteLine("\n\tEl mes ha sido cerrado");
			}
			else
			{
				Console.WriteLine("\n\tEl mes no ha sido cerrado");
			}
		}
	}
}
